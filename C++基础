1、 extern修饰变量、函数，如extern int a，说明要使用的该变量、函数定义在别的文件中，extern只能修饰全局变量，不能修饰局部变量，函数默认前面加了extern。如当要在2.cpp中使用定义在1.cpp文件
中的全局变量时，需要在2.cpp声明extern int a（不需要包含#include“1.cpp”），方可使用1.cpp中的全局变量a。如果1.cpp有头文件1.h，在1.h中声明全局变量extern int a，在1.cpp中定义int a=100，
如果2.cpp想要使用该变量，则只需#include<1.h>即可在2.cpp中使用a，不需要在2.cpp中添加声明语句extern int a。如果头文件中声明变量或函数为static，则该变量或函数的定义只能在该头文件中完成，
变量默认为0，如果想要在对应的cpp文件中再对头文件中声明的static变量或函数进行定义，就会报重复定义的错误。

2、static变量修饰全局变量，声明时就要初始化，默认为0，改变的是该全局变量的作用范围，限定该变量/函数只能作用在本文件内，extern默认为整个程序（包含多个文件）。static修饰局部变量，
改变的是该变量的生命周期，退出函数时该变量不销毁，程序结束才销毁，存储在静态区（全局变量、静态变量都存储在静态区（全局区））。静态局部变量只声明一次，一旦申请内存成功，
不再接受重复申请，之后的再进行定义（初始化）不改变它的值，赋值时会改变。包含定义了static变量的头文件即可使用该变量（无须声明），可以将包含了头文件的cpp文件看成与头文件在同一个文件，这样static变量就可以看成在一个文件范围内。

3、c++输入输出的处理函数
（1） cin是最常见的，如cin>>a>>b  
注意:>> 是会过滤掉不可见字符（如 空格 回车，TAB 换行等）
当 cin>> 从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin>> 会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，
字符最后的分隔符是残留在缓冲区的，cin>> 不做处理。

cin 遇空格或换行，会停止识别，当接受一个字符串，遇“空格”、“TAB”、“回车”都结束

 由于cin在遇到空格/tab时，就会停止读取，所以如果我在第一次输入时，利用空格隔开两个字符串，那么cin在第一次取的时候，只会读取前一个字符串，到空格结束，此时缓冲区还保留着前面输入的第二个
 字符串，那么第二次cin就会直接从缓冲区取残留数据，而不会请求输入。
当然对于以上的情况，也有解决的方案，那就是在第二次调用cin>>str之前通过cin.sync()来清空输入缓冲区

(2)cin.get()

输入结束条件：Enter键

对结束符处理：不丢弃缓冲区中的Enter

若要读取单个字符，直接cin.get(char ch)或ch=cin.get()即可

cin.get()的返回值是int类型，成功：读取字符的ASCII码值，遇到文件结束符时，返回EOF，即-1，Windows下标准输入输入文件结束符为Ctrl+z，Linux为Ctrl+d。

cin.get(char var)如果成功返回的是cin对象，因此可以支持链式操作，如cin.get(b).get(c)。

cin.get(字符数组名，接收长度，结束符)
其中结束符意味着遇到该符号结束字符串读取,默认为enter，读取的字符个数最多为（长度 - 1），因为最后一个为'\0'。要注意的是，cin.get(字符数组名，接收长度，结束符)操作遇到结束符停止读取，
但并不会将结束符从缓冲区丢弃。

cin.get()会读取换行 空格

（3）cin.getline()
其用法与cin.get(字符数组名，接收长度，结束符)极为类似。cin.get()当输入的字符串超长时，不会引起cin函数的错误，后面若有cin操作，会继续执行，只是直接从缓冲区中取数据。
但是cin.getline()当输入超长时，会引起cin函数的错误，后面的cin操作将不再执行。如下代码：

istream& getline(char* s, streamsize count); //默认以换行符结束
istream& getline(char* s, streamsize count, char delim);

cin.get()每次读取一整行并把由Enter键生成的换行符留在输入队列中，然而cin.getline()每次读取一整行并把由Enter键生成的换行符抛弃
注意，cin.getline() 与 cin.get() 的区别是，cin.getline() 不会将行结束符（如换行符）残留在输入缓冲区中。

（4）getline()
同样，此处结束符为可选参数（默认依然为enter）。然而，getline()与前面的诸多存在的差别在于，它string库函数下，而非前面的istream流，所有调用前要在前面加入#include<string>。
与之对应这一方法读入时第二个参数为string类型，而不再是char*，要注意区别。另外，该方法也不是遇到空白字符(tab, space, enter(当结束符不是默认enter时))就结束输入的，且会丢弃
最后一个换行符。

istream& getline ( istream& is, string& str);						//默认以换行符\n分隔行
istream& getline ( istream& is, string& str, char delim);

getline() 利用 cin 可以从标准输入设备键盘读取一行，当遇到如下三种情况会结束读操作：
（1）文件结束；
（2）遇到行分隔符；
（3）输入达到最大限度。

注意，getline() 遇到结束符时，会将结束符一并读入指定的 string 中，再将结束符替换为空字符。因此，进行从键盘读取一行字符时，建议使用 getline。
但是，最好还是要进行标准输入的安全检查，提高程序容错能力。

cin.getline() 与 getline() 类似，但是因为 cin.getline() 的输出是char*，getline() 的输出是 string，所以 cin.getline() 属于 istream 流，而 getline() 属于 string 流，
二者是不一样的函数。

4、explicit关键字只能用于修饰只有一个参数的类构造函数或除了第一个参数以外的其他参数都有默认值的时候, 它的作用是表明该构造函数是显示的, 而非隐式的,防止类构造函数的隐式自动转换 
跟它相对应的另一个关键字是implicit, 意思是隐藏的,类构造函数默认情况下即声明为implicit(隐式).
如A{
public:
 A(int i1, int j1=10)：{
  i=i1;
  j=j1;
 }
 
 int i;
 int j;
}
int main()
{
  A(9); //合法
  A= 9; //合法，如果的构造函数只有一个参数时, 那么在编译的时候就会有一个缺省的转换操作:将该构造函数对应数据类型的数据转换为该类对象，编译器将int转换为A对象
  如果A的构造函数前加了explicit，则该转换不会进行
}

5、类中构造函数const、引用类型只能用初始化列表赋值，因为const 引用不能被赋值，引用不能被赋值之不能改变引用的指向，即声明时就要初始化
调用基类构造函数，或成员变量是类，要对其初始化也要使用初始化列表

6、拷贝构造函数参数为引用类型，值传递会陷入无穷递归，赋值构造函数返回值一般为引用

7、左值引用，如int & i=j不能绑定右值，但是const引用，如const int &i =9是合法的，右值引用只能绑定右值，如int &&i=9

8、initializer_list可用来接收同一类型的可变数量的参数，它同vector的不同之处在于它里面的值是常量，不能被改变，用法：void func（initializer_list<string> param）{}
int main()
{
	func（{"aa","bb","cc"});
}
参数以花括号的形式传入

9、shrink_to_fit成员函数 仅适用于vector、string、deque
表示将capacity减少为与size相同的大小

10、lambda表达式不能有默认参数，可以忽略参数列表和返回类型，但必须永远包含捕获列表和函数体 []()mutable->returnType{}
隐式和显示捕获混用时，第一个元素必须是&或=，后面是需要显示捕获的变量
如果一个lambda体包含出return外的任何语句，编译器假定其返回void，必须显式指定返回类型
值捕获lambda也不会改变该捕获变量的值，若想改变则需加上mutable

11、std::bind()会拷贝参数，但有些参数，如流对象不能拷贝，必须用引用，此事须加上ref，如auto f=std::bind(func, std::res(os),a,_1)

12、shared_ptr  头文件"memory.h"
shared_prt<string> ptr = make_sharee<string> p("sss"); 初始化
引用计数为0时，释放资源 ptr.use_count() == 0
return一个shared_ptr时，产生了拷贝构造的复制，引用计数加一，未被释放，所谓的return时复制的对象是在调用函数后产生的临时值

13、［拷贝构造函数的调用时机］

　1、对象以值传递的方式传入函数参数

　2、对象以值传递的方式从函数返回

　3、对象需要通过另外一个对象进行初始化

14、
为了确保调用派生类的构造函数的时候，已经调用过基类的某个构造函数，完成了派生类的继承自基类部分的数据成员的初始化。即确保调用顺序是：先调用基类的构造函数，再调用派生类的。

因为，调用派生类的构造函数时，可能会调用继承自基类的函数。因此，调用派生类的构造函数时，必须确保继承自基类的部分已构造完毕，而将基类构造函数的调用写在初始化列表中，能更好地做到这一点。

另外，如果基类不存在默认构造函数，则派生类在进行构造函数的时候，必须将基类的构造函数写在初始化列表中的，否则编译不会通过。也就是说，在派生类进入构造函数之中以后，
基类的构造函数默认已经是完成的了

16、类中的static成员变量和函数
static成员变量：
只与类关联，不与类的对象关联，多个类对象共享一份内容。
定义时要分配空间，不能在类声明中初始化，必须在类定义体外部初始化，初始化时不需要标示为static；
可以被非static成员函数任意访问。

static成员函数：
只与类关联，不与类的对象关联，多个类对象共享一份内容
不具有this指针，无法访问类对象的非static成员变量和非static成员函数；
不能被声明为const（const修饰符用于表示函数不能修改成员变量的值，该函数必须是含有this指针的类成员函数）、虚函数和volatile；=
可以被非static成员函数任意访问

const对象不可以调用非const成员函数，因为可能会改变成员变量的值，非const成员函数不能访问const对象的数据成员

17、override：重写父类的虚函数
final：
当不希望某个类被继承，或不希望某个虚函数被重写，可以在类名和虚函数后添加final关键字，添加final关键字后被继承或重写，编译器会报错
Final修饰的方法不能被重写，但是子类可以用父类中final修饰的方法；
Final修饰的成员变量是不可变的，如果成员变量是基本数据类型，初始化之后成员变量的值不能被改变，如final int a
如果成员变量是引用类型，那么它只能指向初始化时指向的那个对象，不能再指向别的对象，但是对象当中的内容是允许改变的。

18、封装是编译期的概念，是针对类型而非对象的，在类的成员函数中可以访问同类型实例对象的私有成员变量．

19、构造和析构函数不能是inline，因为编译器加了很多东西在里面
对于虚函数，多态下虚函数不会是inline，即使是声明为inline，编译器也不会是inline，因为多态是在运行期确定，inline是在编译期间替换，非多态则可以

20、不要在构造函数中调用虚函数的原因：因为父类对象会在子类之前进行构造，此时子类部分的数据成员还未初始化， 因此调用子类的虚函数是不安全的，故而C++不会进行动态联编。
不要在析构函数中调用虚函数的原因：析构函数是用来销毁一个对象的，在销毁一个对象时，先调用子类的析构函数，然后再调用基类的析构函数。所以在调用基类的析构函数时，
派生类对象的数据成员已经“销毁”，这个时再调用子类的虚函数已经没有意义了。

21、
不能重载的运算符只有5个：
1、.  (成员访问运算符)
2、.*  (成员指针访问运算符)
3、::  (域运算符)
4、sizeof
(长度运算符)
5、?:  (条件运算符）

22、成员函数的指针(即函数指针):
返回类型 (类名::*指针名)(形参类型) = &类名::成员函数名(注意类名前一定要加取地址符&,不然报错)


和普通函数指针一样，指向静态成员函数的指针(还是函数指针):
返回类型 (*指针名)(形参类型) = Student::s_add(注意类型前面可以不加&也可以加)










































