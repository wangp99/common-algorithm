1、 extern修饰变量、函数，如extern int a，说明要使用的该变量、函数定义在别的文件中，extern只能修饰全局变量，不能修饰局部变量，函数默认前面加了extern。如当要在2.cpp中使用定义在1.cpp文件
中的全局变量时，需要在2.cpp声明extern int a（不需要包含#include“1.cpp”），方可使用1.cpp中的全局变量a。如果1.cpp有头文件1.h，在1.h中声明全局变量extern int a，在1.cpp中定义int a=100，
如果2.cpp想要使用该变量，则只需#include<1.h>即可在2.cpp中使用a，不需要在2.cpp中添加声明语句extern int a。如果头文件中声明变量或函数为static，则该变量或函数的定义只能在该头文件中完成，
变量默认为0，如果想要在对应的cpp文件中再对头文件中声明的static变量或函数进行定义，就会报重复定义的错误。

2、static变量修饰全局变量，改变的是该全局变量的作用范围，限定该变量/函数只能作用在本文件内，extern默认为整个程序（包含多个文件）。static修饰局部变量，改变的是该变量的生命周期，退出函数
时该变量不销毁，程序结束才销毁，存储在静态区（全局变量、静态变量都存储在静态区（全局区））。静态局部变量只声明一次，一旦申请内存成功，不再接受重复申请，之后的再进行定义修改只是在修改
它的值。包含定义了static变量的头文件即可使用该变量（无须声明），可以将包含了头文件的cpp文件看成与头文件在同一个文件，这样static变量就可以看成在一个文件范围内。
