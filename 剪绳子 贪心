剪绳子问题
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？
例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。


数学推导的解法

补充：不等式链
调和平均数：Hn=n/(1/a1+1/a2+...+1/an)
几何平均数：Gn=(a1a2...an)^(1/n)
算术平均数：An=(a1+a2+...+an)/n
平方平均数：Qn=[(a1^2+a2^2+...+an^2)/n]^(1/2)
调和平均数<=几何平均数<=算术平均数<=平方平均数,当且仅当a1=a2=..=an取等号

(a1*a2*...*an)^(1/n)<=(a1+a2+...+an)/n,当且仅当a1=a2=..=an取等号

设绳子长为a，分为a1,a2,..an共n段绳子，a1+a2+...+an=a,当且仅当a1=a2=...=an=x=a/n,时，(a1*a2*...*an)^(1/n)<=(a1+a2+...+an)/n取得等号，此时a1*a2*...*an最大(1/n为常数)

y=x^n,又n=a/x,所以y=x^(a/x),求y的最大值，相当于求y=x^(1/x)的最大值
y=x^(1/x)
lny=(1/x)lnx
y'/y=(1-lnx)/x^2
y'=y*(1-lnx)/x^2=x^n*(1-lnx)/x^2
令y'=0，则x=e，约为2.7，当0<x<2.7,递增，x>2.7递减
又x为整数，y(x=2)=2^(1/2)  (y(x=2))^6=2^3=8 
y(x=3)=3^(1/3)  (y(x=3))^6=3^2=9
当x=3时y最大，所以每段绳子长度尽量取3
总结得
a%3=0时  y=x^n (3除外)
a%3=1时  y=x^(n-1)*4
a%3=2时，y=2*x^n

快速幂取余，其实就是a^b mod c

方法一：
int  ans=1, i;
for(i=1;i<=b;i++)
    ans*=a;
ans%=c;

直接硬求a的b次方的值容易溢出，这个算法的时间复杂度体现在for循环中，为O(b)

方法二：
公式：a^b mod c =((a mod c)^b) mod c ，即积的取余等于取余的积的取余.
引理：(a×b) mod c=[(a mod c)×(b mod c)]mod c
 
改进为a=a mod c,但这样仍有可能溢出

int ans = 1 , i ;  
 a = a % c; //加上这一句 
 for ( i = 1;i<=b;i++) 
     ans = ans * a;  
 ans = ans % c;
 
方法三：

既然某个因子取余之后相乘再取余保持余数不变，那么新算得的ans也可以进行取余，所以得到比较良好的改进版本

int  ans = 1 ,i ;  
a = a % c;
for(int i = 1;i<=b;i++) 
    ans = (ans * a) % c; //这里再取了一次余 
ans = ans % c;

这个算法在时间复杂度上没有改进，仍为O(b)，不过已经好很多的，但是在c过大的条件下，还是很有可能超时，所以，我们推出以下的快速幂算法





















